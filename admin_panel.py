"""
–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
"""
import asyncio
from database.models import Database
from datetime import datetime, timedelta


async def main():
    db = Database("database/diia.db")
    await db.init_db()
    
    print("=" * 60)
    print("  DIIA - –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨")
    print("=" * 60)
    
    while True:
        print("\nüìã –ú–µ–Ω—é:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("2. –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        print("3. –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        print("4. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        
        if choice == "1":
            await show_all_users(db)
        elif choice == "2":
            await grant_subscription(db)
        elif choice == "3":
            await remove_subscription(db)
        elif choice == "4":
            await search_user(db)
        elif choice == "0":
            print("\nüëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


async def show_all_users(db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = await db.get_all_users()
    
    if not users:
        print("\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç")
        return
    
    print("\n" + "=" * 100)
    print(f"{'ID':<5} {'–õ–æ–≥–∏–Ω':<15} {'–§–ò–û':<30} {'–ü–æ–¥–ø–∏—Å–∫–∞':<15} {'–¢–∏–ø':<12}")
    print("=" * 100)
    
    for user in users:
        sub_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user['subscription_active'] else "‚ùå –ù–µ—Ç"
        print(f"{user['id']:<5} {user['login']:<15} {user['full_name']:<30} {sub_status:<15} {user['subscription_type']:<12}")
    
    print("=" * 100)


async def grant_subscription(db):
    """–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
    login = input("\nüîë –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
    
    user = await db.get_user_by_login(login)
    if not user:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{login}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"\nüë§ –ù–∞–π–¥–µ–Ω: {user['full_name']}")
    print(f"üìä –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if user['subscription_active'] else '‚ùå –ù–µ—Ç'}")
    print(f"üé´ –¢–∏–ø: {user['subscription_type']}")
    
    print("\nüíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:")
    print("1. Basic (–±–∞–∑–æ–≤–∞—è)")
    print("2. Premium (–ø—Ä–µ–º–∏—É–º)")
    print("3. –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞")
    
    sub_choice = input("–í—ã–±–æ—Ä: ").strip()
    
    sub_types = {
        "1": "basic",
        "2": "premium",
        "3": "–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞"
    }
    
    sub_type = sub_types.get(sub_choice)
    if not sub_type:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    print("\nüìÖ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?")
    days = input("–î–Ω–µ–π (–∏–ª–∏ Enter –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–π): ").strip()
    
    until = None
    if days and days.isdigit():
        until_date = datetime.now() + timedelta(days=int(days))
        until = until_date.isoformat()
    
    await db.update_subscription(user['id'], True, sub_type, until)
    
    print(f"\n‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞!")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['full_name']}")
    print(f"üé´ –¢–∏–ø: {sub_type}")
    print(f"üìÖ –î–æ: {until if until else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}")


async def remove_subscription(db):
    """–ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
    login = input("\nüîë –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
    
    user = await db.get_user_by_login(login)
    if not user:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{login}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"\nüë§ –ù–∞–π–¥–µ–Ω: {user['full_name']}")
    print(f"üìä –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if user['subscription_active'] else '‚ùå –ù–µ—Ç'}")
    
    confirm = input("\n‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    
    if confirm == "–¥–∞" or confirm == "yes":
        await db.update_subscription(user['id'], False, "–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞", None)
        print(f"\n‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è {user['full_name']}")
    else:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")


async def search_user(db):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    login = input("\nüîç –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ").strip()
    
    user = await db.get_user_by_login(login)
    if not user:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{login}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    last_login = user['last_login'] if user['last_login'] else "–ù–∏–∫–æ–≥–¥–∞"
    if last_login != "–ù–∏–∫–æ–≥–¥–∞":
        try:
            dt = datetime.fromisoformat(last_login)
            last_login = dt.strftime("%d.%m.%Y –≤ %H:%M")
        except:
            pass
    
    print("\n" + "=" * 60)
    print(f"üë§ –§–ò–û: {user['full_name']}")
    print(f"üóìÔ∏è  –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user['birth_date']}")
    print(f"üîë –õ–æ–≥–∏–Ω: {user['login']}")
    print(f"üì≤ Telegram ID: {user['telegram_id']}")
    print(f"üìä –ü–æ–¥–ø–∏—Å–∫–∞: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if user['subscription_active'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
    print(f"üé´ –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {user['subscription_type']}")
    print(f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user['subscription_until'] if user['subscription_until'] else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}")
    print(f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_login}")
    print(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user['registered_at']}")
    print("=" * 60)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã –í—ã—Ö–æ–¥...")

